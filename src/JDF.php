<?php
declare(strict_types=1);

/**
 * This file contains the RWC\Caldera\JDF class.
 *
 * @author Brian Reich <breich@reich-consulting.net>
 * @copyright Copyright (C) 2018 PrintFrog
 * @license Proprietary
 */

namespace RWC\Caldera;

use RWC\Caldera\JDF\JDFException;
use RWC\Caldera\JDF\ResourceLinkPool;
use RWC\Caldera\JDF\ResourcePool;
use RWC\Caldera\JDF\AuditPool;

/**
 * A JDF Node.
 *
 * A JDF ticket must have one root JDF node. It can have child JDF nodes in
 * some cases (see Type).
 *
 * @package RWC\Caldera
 */
class JDF implements IJDFComponent
{
    /**
     * XML namespace of document.
     */
    const XML_NS = 'http://www.CIP4.org/JDFSchema_1_1';

    /**
     * The JDF id.
     *
     * @var string
     */
    protected $uniqueId;

    /**
     * The job id.
     *
     * @var string
     */
    protected $jobId;

    /**
     * The job part id.
     *
     * @var string
     */
    protected $jobPartId;

    /**
     * The job status.
     *
     * @var string
     */
    protected $status;

    /**
     * The node type.
     *
     * @var string
     */
    protected $type;

    /**
     * List of node types if type is "Combined".
     *
     * @var array|null
     */
    protected $types;

    /**
     * JDF version.
     *
     * @var float
     */
    protected $version;

    /**
     * Descriptive name of the job.
     * @var string|null
     */
    protected $descriptiveName;

    /**
     * Activation flag.
     *
     * @var string
     */
    protected $activation;

    /**
     * Contains audit resources.
     *
     * @var AuditPool
     */
    protected $auditPool;

    /**
     * Container for resources.
     * @var ResourcePool
     */
    protected $resourcePool;

    /**
     * Describes input and output resources of the node.
     * @var ResourceLinkPool
     */
    protected $resourceLinkPool;

    /**
     * JDF constructor.
     *
     * @param string $id The JDF id.
     * @param string $status The job status.
     * @param string $type The JDF node type.
     * @param AuditPool $auditPool The AuditPool.
     * @param ResourcePool $resourcePool The ResourcePool.
     * @param ResourceLinkPool $resourceLinkPool The ResourceLinkPool.
     * @param null|string $jobId The job id, set by the producer.
     * @param null|string $jobPartId The job part id, set by the producer.
     * @param array|null $types List of node types.
     * @param null|float $version The JDF version.
     * @param null|string $descriptiveName A descriptive one-line name of the job.
     * @param null|string $activation The activation flag.
     */
    public function __construct(
        string $id,
        string $status,
        string $type,
        AuditPool $auditPool,
        ResourcePool $resourcePool,
        ResourceLinkPool $resourceLinkPool,
        ?string $jobId = null,
        ?string $jobPartId = null,
        ?array $types = null,
        ?float $version = null,
        ?string $descriptiveName = null,
        ?string $activation = 'Active'
    ) {
        $this->setId($id);
        $this->setStatus($status);
        $this->setType($type);
        $this->setAuditPool($auditPool);
        $this->setResourcePool($resourcePool);
        $this->setResourceLinkPool($resourceLinkPool);
        $this->setJobId($jobId);
        $this->setJobPartId($jobPartId);
        $this->setTypes($types);
        $this->setVersion($version);
        $this->setDescriptiveName($descriptiveName);
        $this->setActivation($activation);
    }

    /**
     * Sets the ID of the JDF node.
     *
     * @param string $uniqueId The ID of the JDF node.
     */
    public function setId(string $uniqueId) : void
    {
        $this->uniqueId = $uniqueId;
    }

    /**
     * Returns the ID of the JDF node.
     *
     * @return string Returns the ID of the JDF node.
     */
    public function getId() : string
    {
        return $this->uniqueId;
    }

    /**
     * Sets the job id.
     *
     * The job id is optional but required in root nodes. The job id is an
     * internal job id generated by the job's producer.
     *
     * @param string|null $jobId The job id.
     */
    public function setJobId(?string $jobId = null) : void
    {
        $this->jobId = $jobId;
    }

    /**
     * Returns the job id.
     *
     * @return string Returns the job id.
     */
    public function getJobId() : ?string
    {
        return $this->jobId;
    }

    /**
     * Sets the job part id.
     *
     * Identifies the job node within the job.  Job part id is an internal id
     * generated by the job producer.
     *
     * @param string|null $jobPartId The job part id.
     */
    public function setJobPartId(?string $jobPartId = null) : void
    {
        $this->jobPartId = $jobPartId;
    }

    /**
     * Returns the job part id.
     *
     * @return string Returns the job part id.
     */
    public function getJobPartId() : ?string
    {
        return $this->jobPartId;
    }

    /**
     * Sets the job node status.
     *
     * The status can be one of the following. "Waiting" specifies that the node
     * can be executed, but has not been tested. Ready specifies that the node
     * can be executed and has been tested. "InProgress" specifies that the node
     * is executing. "Completed" specifies that the node executed and finished
     * correctly. "Aborted" specifies that the node aborted, either manually or
     * due to an error.
     *
     * @param string $status The job node status.
     */
    public function setStatus(string $status) : void
    {
        $this->status = $status;
    }

    /**
     * Returns the job status.
     *
     * @return string Returns the job status.
     */
    public function getStatus() : string
    {
        return $this->status;
    }

    /**
     * Sets the node type.
     *
     * The node type can be "Combined": A Process node that covers more than one
     * Process, when a single device can have several roles. "ProcessGroup" is
     * an intermediate level, describes a group of Processes. "Product": is the
     * highest level and describes completely a product and can have nested
     * ProcessGroups and/or Processes.
     *
     * Other values are supported. For example "DigitalPrinting" is currently
     * the only value supported by Caldera.
     *
     * @param string $type The node type.
     */
    public function setType(string $type) : void
    {
        $this->type = $type;
    }

    /**
     * Returns the node type.
     *
     * @return string Returns the node type.
     */
    public function getType() : string
    {
        return $this->type;
    }

    /**
     * Sets the types list.
     *
     * The types list if a list of values used for the Type option. Required is
     * "Type" is "Combined". Specified as an array of list types. Will output
     * as a space-separated list.
     *
     * @param array|null $types The types list.
     */
    public function setTypes(?array $types = []) : void
    {
        $types = $types ?? [];

        $this->types = $types;
    }

    /**
     * Returns the types list.
     *
     * @return array Returns the types list.
     */
    public function getTypes() : array
    {
        return $this->types ?? [];
    }

    /**
     * Sets the supported JDF version.
     *
     * @param float|null $version The supported JDF version.
     */
    public function setVersion(?float $version = null)
    {
        $version = $version ?? Configurations::DEFAULT_JDF_VERSION;

        $this->version = $version;
    }

    /**
     * Returns the supported JDF version.
     *
     * @return float Returns the supported JDF version.
     */
    public function getVersion() : float
    {
        return $this->version;
    }

    /**
     * Sets the descriptive name of the job.
     *
     * The descriptive name is optional but required in the root JDF node. The
     * descriptive name is a human-readable one-line string, or "job title."
     *
     * @param null|string $descriptiveName The descriptive name of the job.
     */
    public function setDescriptiveName(?string $descriptiveName = null) : void
    {
        $this->descriptiveName = $descriptiveName;
    }

    /**
     * Returns the descriptive name of the job.
     *
     * @return null|string Returns the descriptive name of the job.
     */
    public function getDescriptiveName() : ?string
    {
        return $this->descriptiveName;
    }

    /**
     * Sets the Activation flag.
     *
     * The Activation flag is optional and the default is "Active". If "Active"
     * then the job is active.  This is the only value that allows the job to be
     * run.  "Held" may be used to hold the job for review.  Any option values
     * are interpreted as "Inactive" and the job will not be run.
     *
     * @param null|string $activation The Activation flag.
     */
    public function setActivation(?string $activation = 'Active') : void
    {
        $activation = $activation ?? 'Active';

        $this->activation = $activation;
    }

    /**
     * Returns the activation flag.
     *
     * @return string Returns the activation flag.
     */
    public function getActivation() : string
    {
        return $this->activation;
    }

    /**
     * Sets the AuditPool.
     *
     * The AuditPool element contains audit information including errors,
     * messages, logs, notifications, etc.
     * @param AuditPool $auditPool The AuditPool.
     */
    public function setAuditPool(AuditPool $auditPool) : void
    {
        $this->auditPool = $auditPool;
    }

    /**
     * Returns the AuditPool.
     *
     * @return AuditPool Returns the AuditPool.
     */
    public function getAuditPool() : AuditPool
    {
        return $this->auditPool;
    }

    /**
     * Sets the ResourcePool.
     *
     * The ResourcePool element is a container for job resources.
     *
     * @param ResourcePool $resourcePool The ResourcePool.
     */
    public function setResourcePool(ResourcePool $resourcePool)  : void
    {
        $this->resourcePool = $resourcePool;
    }

    /**
     * Returns the ResourcePool.
     *
     * @return ResourcePool Returns the ResourcePool.
     */
    public function getResourcePool() : ResourcePool
    {
        return $this->resourcePool;
    }

    /**
     * Sets the ResourceLinkPool.
     *
     * The ResourceLinkPool describes input and output resources of the node.
     *
     * @param ResourceLinkPool $resourceLinkPool The ResourceLinkPool.
     */
    public function setResourceLinkPool(ResourceLinkPool $resourceLinkPool) : void
    {
        $this->resourceLinkPool = $resourceLinkPool;
    }

    /**
     * Returns the ResourceLinkPool.
     *
     * @return ResourceLinkPool Returns the ResourceLinkPool.
     */
    public function getResourceLinkPool() : ResourceLinkPool
    {
        return $this->resourceLinkPool;
    }

    /**
     * Generates a DOMElement representing the JDFComponent.
     *
     * @param \DOMDocument $dom The DOMDocument use to generate the element.
     *
     * @return \DOMElement Returns the generated DOMElement for the component.
     */
    public function getJDF(\DOMDocument $dom): \DOMElement
    {
        $element = $dom->createElementNS(Configurations::XML_JDF_NAMESPACE, 'JDF');

        $element->setAttribute('ID', $this->getId());

        // Only include if set.
        if (! empty($this->getJobId())) {
            $element->setAttribute('JobID', $this->getJobId());
        }

        // Only include if set.
        if (! empty($this->getJobPartId())) {
            $element->setAttribute('JobPartID', $this->getJobPartId());
        }

        $element->setAttribute('Status', $this->getStatus());
        $element->setAttribute('Type', $this->getType());

        // Only include if set.
        if (! empty($this->getTypes())) {
            $element->setAttribute('Types', implode(' ', $this->getTypes()));
        }

        $element->setAttribute('Version', (string) $this->getVersion());
        $element->setAttribute('ICSVersions', Configurations::XML_ICS_VERSIONS);

        $element->setAttribute('xmlns', Configurations::XML_JDF_NAMESPACE);
        $element->setAttribute('xmlns:xsi', Configurations::XML_XSI_NAMESPACE);
        $element->setAttribute('xmlns:cal', Configurations::XML_CALDERA_NAMESPACE);

        if (! empty($this->getDescriptiveName())) {
            $element->setAttribute('DescriptiveName', $this->getDescriptiveName());
        }

        if (! empty($this->getActivation())) {
            $element->setAttribute('Activation', $this->getActivation());
        }

        $element->appendChild($this->getResourcePool()->getJDF($dom));
        $element->appendChild($this->getResourceLinkPool()->getJDF($dom));
        $element->appendChild($this->getAuditPool()->getJDF($dom));

        return $element;
    }

    /**
     * Returns the JDF node as a DOMDocument.
     *
     * @return \DOMDocument Returns the JDF as a DOMDocument.
     */
    public function getJDFDocument() : \DOMDocument
    {
        $document = new \DOMDocument();
        $document->appendChild($this->getJDF($document));
        return $document;
    }

    /**
     * Creates a new instance of the IJDFComponent from a DOMElement.
     *
     * @param \DOMElement $element The DOMElement containing the component definition.
     * @return IJDFComponent Returns the Component.
     * @throws JDFException if the DOMElement does not define a valid component descriptor.
     */
    public static function fromJDFElement(\DOMElement $element) : IJDFComponent
    {
        $jdfId       = $element->getAttribute('ID');
        $status      = $element->getAttribute('Status');
        $type        = $element->getAttribute('Type');
        $jobId       = $element->getAttribute('JobID');
        $jobPartId   = $element->getAttribute('JobPartID');
        $types       = explode(' ', $element->getAttribute('Types'));
        $version     = $element->getAttribute('Version');
        $descriptiveName = $element->getAttribute('DescriptiveName');
        $activation = $element->getAttribute('Activation');

        $jobId = empty($jobId) ? null : $jobId;
        $jobPartId = empty($jobPartId) ? null : $jobPartId;
        $types = empty($types) ? null : $types;
        $descriptiveName = empty($descriptiveName) ? null : $descriptiveName;
        $activation = empty($activation) ? null : $activation;
        $version = empty($version) ? null : (float) $version;

        $auditPoolEl = $element->getElementsByTagName('AuditPool');
        $resourcePoolEl = $element->getElementsByTagName('ResourcePool');
        $resourceLinkPoolEl = $element->getElementsByTagName('ResourceLinkPool');

        if (empty($auditPoolEl)) {
            throw new JDFException('Required JDF sub-element AuditPool not set.');
        }

        if (empty($jdfId)) {
            throw new JDFException('Required <JDF/> ID attribute not set.');
        }

        if (empty($status)) {
            throw new JDFException('Required <JDF/> Status attribute not set.');
        }

        if (empty($type)) {
            throw new JDFException('Required <JDF/> Type attribute not set.');
        }

        if (empty($resourceLinkPoolEl)) {
            throw new JDFException('Required <JDF/> sub-element ResourceLinkPool missing');
        }
        $auditPool = AuditPool::fromJDFElement($auditPoolEl[0]);
        $resourcePool = ResourcePool::fromJDFElement($resourcePoolEl[0]);
        $resourceLinkPool = ResourceLinkPool::fromJDFElement($resourceLinkPoolEl[0]);

        return new JDF(
            $jdfId,
            $status,
            $type,
            $auditPool,
            $resourcePool,
            $resourceLinkPool,
            $jobId,
            $jobPartId,
            $types,
            $version,
            $descriptiveName,
            $activation
        );
    }

    /**
     * Created a JDF object model from a JDF XML document.
     *
     * @param string $jdf The JDF XML document to read.
     * @return JDF Returns the JDF object model.
     * @throws JDFException if the string contains invalid JDF.
     */
    public static function fromJDF(string $jdf) : JDF
    {
        if (empty($jdf)) {
            throw new JDFException('JDF document was empty.');
        }

        $domDocument = new \DOMDocument();

        if (! $domDocument->loadXML($jdf)) {
            throw new JDFException('String could not be parsed as valid XML.');
        }

        if ($domDocument->firstChild == null) {
            throw new JDFException('JDF document contained no elements.');
        }

        if ($domDocument->firstChild->nodeName !== 'JDF') {
            throw new JDFException('JDF document did not start with a JDF tag.');
        }

        return self::fromJDFElement($domDocument->firstChild);
    }
}
